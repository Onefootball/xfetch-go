// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import time "time"

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, cmd, key
func (_m *Cache) Get(ctx context.Context, cmd string, key string) (interface{}, float64, float64, error) {
	ret := _m.Called(ctx, cmd, key)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) interface{}); ok {
		r0 = rf(ctx, cmd, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 float64
	if rf, ok := ret.Get(1).(func(context.Context, string, string) float64); ok {
		r1 = rf(ctx, cmd, key)
	} else {
		r1 = ret.Get(1).(float64)
	}

	var r2 float64
	if rf, ok := ret.Get(2).(func(context.Context, string, string) float64); ok {
		r2 = rf(ctx, cmd, key)
	} else {
		r2 = ret.Get(2).(float64)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, string, string) error); ok {
		r3 = rf(ctx, cmd, key)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// Put provides a mock function with given fields: ctx, cmd, key, ttl, delta, args
func (_m *Cache) Put(ctx context.Context, cmd string, key string, ttl time.Duration, delta time.Duration, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, cmd, key, ttl, delta)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration, time.Duration, ...interface{}) error); ok {
		r0 = rf(ctx, cmd, key, ttl, delta, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
